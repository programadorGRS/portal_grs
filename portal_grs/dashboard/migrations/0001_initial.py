# Generated by Django 5.1.6 on 2025-03-02 02:41

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('nome', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('is_staff', models.BooleanField(default=False)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('ultima_sessao', models.DateTimeField(blank=True, null=True)),
                ('tipo_usuario', models.CharField(choices=[('admin', 'Administrador'), ('normal', 'Usuário Normal')], default='normal', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'usuarios',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('codigo', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nome_abreviado', models.CharField(max_length=60, verbose_name='Nome Abreviado')),
                ('razao_social_inicial', models.CharField(max_length=200, verbose_name='Razão Social Inicial')),
                ('razao_social', models.CharField(max_length=200, verbose_name='Razão Social')),
                ('endereco', models.CharField(max_length=110, verbose_name='Endereço')),
                ('numero_endereco', models.CharField(max_length=20, verbose_name='Número')),
                ('complemento_endereco', models.CharField(blank=True, max_length=300, null=True, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=80, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=50, verbose_name='Cidade')),
                ('cep', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='CEP deve estar no formato XXXXX-XXX', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('uf', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='UF')),
                ('cnpj', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato XX.XXX.XXX/XXXX-XX', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('inscricao_estadual', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Estadual')),
                ('inscricao_municipal', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Municipal')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('codigo_cliente_integracao', models.CharField(blank=True, max_length=20, null=True, verbose_name='Código Cliente Integração')),
                ('codigo_cliente_int', models.CharField(blank=True, max_length=30, null=True, verbose_name='Cód. Cliente (INT.)')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'db_table': 'empresas',
                'ordering': ['nome_abreviado'],
                'indexes': [models.Index(fields=['nome_abreviado'], name='empresas_nome_ab_c2b5a7_idx'), models.Index(fields=['cnpj'], name='empresas_cnpj_009d7f_idx'), models.Index(fields=['ativo'], name='empresas_ativo_c55b16_idx')],
            },
        ),
        migrations.CreateModel(
            name='AcessoEmpresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissao_leitura', models.BooleanField(default=True)),
                ('permissao_escrita', models.BooleanField(default=False)),
                ('permissao_exclusao', models.BooleanField(default=False)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.empresa')),
            ],
            options={
                'verbose_name': 'Acesso à Empresa',
                'verbose_name_plural': 'Acessos às Empresas',
                'db_table': 'acesso_empresas',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='acesso_empresas',
            field=models.ManyToManyField(related_name='usuarios_com_acesso', through='dashboard.AcessoEmpresa', to='dashboard.empresa'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='empresa_principal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_principal', to='dashboard.empresa'),
        ),
        migrations.CreateModel(
            name='Tela',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nome', models.CharField(db_index=True, max_length=100, unique=True)),
                ('codigo', models.CharField(max_length=50, unique=True)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('ativo', models.BooleanField(default=True)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tela',
                'verbose_name_plural': 'Telas',
                'db_table': 'telas',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='telas_nome_25cfa4_idx'), models.Index(fields=['codigo'], name='telas_codigo_932468_idx')],
            },
        ),
        migrations.CreateModel(
            name='AcessoTela',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissao_leitura', models.BooleanField(default=True)),
                ('permissao_escrita', models.BooleanField(default=False)),
                ('permissao_exclusao', models.BooleanField(default=False)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tela', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.tela')),
            ],
            options={
                'verbose_name': 'Acesso à Tela',
                'verbose_name_plural': 'Acessos às Telas',
                'db_table': 'acesso_telas',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='acesso_telas',
            field=models.ManyToManyField(through='dashboard.AcessoTela', to='dashboard.tela'),
        ),
        migrations.AddIndex(
            model_name='acessoempresa',
            index=models.Index(fields=['usuario', 'empresa'], name='acesso_empr_usuario_bf877d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='acessoempresa',
            unique_together={('usuario', 'empresa')},
        ),
        migrations.AddIndex(
            model_name='acessotela',
            index=models.Index(fields=['usuario', 'tela'], name='acesso_tela_usuario_78776b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='acessotela',
            unique_together={('usuario', 'tela')},
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email'], name='usuarios_email_0ff7b3_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['tipo_usuario'], name='usuarios_tipo_us_3a6d09_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['is_active'], name='usuarios_is_acti_8ee55c_idx'),
        ),
    ]
